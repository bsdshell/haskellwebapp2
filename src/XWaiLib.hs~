{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
-- empty the map (ref HMap) 
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE DeriveGeneric, DeriveAnyClass #-}
-- {-# LANGUAGE DisambiguateRecordFields #-}
{-# LANGUAGE ScopedTypeVariables #-}

-- https://github.com/ndmitchell/record-dot-preprocessor#readme
-- dot operator for record
-- {-# OPTIONS_GHC -fplugin=RecordDotPreprocessor #-}
-- {-# LANGUAGE TypeApplications, FlexibleContexts, DataKinds, MultiParamTypeClasses, TypeSynonymInstances, FlexibleInstances #-}

{-| 
    The Module contains all the functions for __haskellwebapp2__

    * Use Aeson to serialize record to Json
    * Record: Person
    * Insert data to MySqlit-simple file-based database
    * Upload file to server.
    * Use Redis(memcached) to store snippet and query snippet.
    * *src/aronlib.js* is symbollink to *$b/jslib/aronjs.js*
    * All Javascript functions are in *src/aronlib.js*
    * Use 'responseJavascript' to send *src/aronlib.js* to client side.
-} 
module XWaiLib where



import Control.Monad
import Data.Char
import Data.Maybe
import Data.List
import Data.List.Split
import Data.Time

import Data.Time.Clock.POSIX
import System.Directory
import System.Environment
import System.Exit
import System.FilePath.Posix
import System.IO
import System.Posix.Files
import System.Posix.Unistd
import System.Process
import Text.Read






import Blaze.ByteString.Builder.Char.Utf8 (fromString)



import qualified Data.Word8 as DW
import Data.Text (Text)  -- strict Text
import qualified Data.Text as TS               -- strict Text         
import qualified Data.Text.Lazy                 as DL 
import qualified Data.Text.IO                   as TIO 

import qualified Control.Concurrent             as Concurrent
import qualified Data.List as L
import qualified Data.HashMap.Strict as M 
import qualified Control.Exception              as Exception
import qualified Safe

import qualified Data.ByteString.UTF8 as BU
import qualified Data.ByteString.Lazy.Internal as IN (ByteString)
import qualified Data.ByteString.Char8      as S8 (unpack,pack, putStrLn)   -- strict ?
import qualified Data.ByteString.Lazy       as LA (writeFile, fromChunks, fromStrict)
import qualified Data.ByteString.Lazy.Char8 as LC 
import qualified Data.ByteString            as BS
import qualified Data.ByteString.Internal   as BI (c2w, w2c)

-- import PortableLines
-- import AronModule                hiding(run, cmd)
import AronModule hiding(run, cmd)
-- import HtmlForm                 
import qualified AronModule                 as A

import qualified Turtle as TUR -- (empty, shellStrictWithErr, ExitCode)
-- import Data.Text.Lazy -- lazy Text




-- remove it since there is issue to build in stack
-- copy the source code and create a module called PortableLines
-- import qualified Text.PortableLines as POR   -- (lines replace window newline '\r\n' with '\n')

import           Data.Int (Int64)




import qualified Data.ByteString.Lazy      as BL
import qualified Data.ByteString.UTF8      as BSU
import qualified Data.ByteString           as BS
import qualified Data.Text                 as TS    -- strict Text

import qualified Data.Text.Lazy            as TL    -- lazy Text
import qualified Data.Text.Encoding        as TSE
import qualified Data.Text.Lazy.Encoding   as TLE



-- BEG_993 concurrency
import System.Timeout
import Criterion.Measurement
import System.IO.Unsafe
import System.Process
import Control.Exception
import System.IO
import System.IO.Error
import GHC.IO.Exception
import System.Exit
import Control.Concurrent.MVar
import Control.Concurrent
-- END_993 concurrency


loopDelay::Int -> String -> IO Int
loopDelay max f = do
      threadDelay 1000000
      putStrLn $ "max=" ++ show max
      if max > 8000000 then return 0
        else fExist f >>= \b -> if b then return 1 else loopDelay (max + 1000000) f            

-- runOnExternalProgram :: Int -> String -> IO String
runOnExternalProgram :: Int -> String -> IO (Either String String)
runOnExternalProgram n fLatexName = 
    -- convert the input to a parameter of the external program
    let x = show $ n + 12
        outdir = "/Users/cat/myfile/bitbucket/haskellwebapp2"
    -- bracketOnError:: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
    in bracketOnError
        -- (createProcess (proc "ls" []){std_in = CreatePipe
                                         -- ,std_out = CreatePipe
                                         -- ,std_err = Inherit})
        -- (createProcess (proc "/opt/local/bin/pdflatex" ["-output-directory", outdir, fLatexName </> "latex.tex"]){ cwd = Just fLatexName
        (createProcess (proc "/opt/local/bin/pdflatex" ["-halt-on-error", "-output-directory", outdir,  fLatexName]){ cwd = Just (dropName fLatexName)
                                                    ,std_in = CreatePipe
                                                    ,std_out = CreatePipe
                                                    ,std_err = Inherit})
        (\(Just inh, Just outh, _, pid) -> terminateProcess pid >> waitForProcess pid)
        (\(Just inh, Just outh, _, pid) -> do

          -- fork a thread to consume output
          -- http://neilmitchell.blogspot.com/2012/06/flavours-of-mvar_04.html
          -- let loop f = do
                -- putStrLn "loop it"
                -- fExist f >>= \b -> if b then return 1 else loop f            

          let lo bo = if bo then bo else lo bo    
          output <- hGetContents outh
          outMVar <- newEmptyMVar
          -- forkIO $ evaluate (
            -- len ("a"::String)
            -- length output
            -- lo True
            -- myloop "/tmp/file.x" >>= \x -> return x
            --- length output
            -- ) >>= putMVar outMVar
          
          forkIO $ evaluate (
            do
            n <- loopDelay 1000000 fLatexName
            -- let ln = len output
            -- putMVar outMVar (n + ln)
            return n
            -- lo True
            -- myloop "/tmp/file.x" >>= \x -> return x
            --- length output
            ) >>= \x -> x >>= putMVar outMVar
          
          -- no input in this case
          hClose inh

          -- KEY: thread block, polling, wait on output, blocking until there is value in outMVar
          takeMVar outMVar
          -- hClose outh

          -- wait for process
          ex <- waitForProcess pid

          case ex of
            ExitSuccess -> do
              -- convert the output as needed
              let verboseAnswer = "External program answered: " ++ output
              -- return verboseAnswer
              return $ Right verboseAnswer
            ExitFailure r -> do
              -- ioError (mkIOError OtherError ("spawned process exit: " ++ show r) Nothing Nothing) )
              return $ Left ("spawned process exit: " ++ show r))

